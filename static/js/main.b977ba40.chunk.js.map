{"version":3,"sources":["components/NumberWidget/style/NumberWidget.module.css","components/Introduction/style/Introduction.module.css","components/ChooseDifficulty/style/ChooseDifficulty.module.css","components/SudokuTable/style/SudokuTable.module.css","components/Timer/style/Timer.module.css","components/Hints/style/Hints.module.css","js/matrixFunctions.js","js/matrixContextAPI.js","components/Introduction/NeverPlayed.jsx","components/Introduction/NeverPlayedDifficulty.jsx","components/Introduction/PersonalBest.jsx","components/Introduction/Introduction.jsx","components/ChooseDifficulty/ChooseDifficulty.jsx","components/Timer/Timer.jsx","icons/LightBulb.jsx","components/Hints/Hints.jsx","components/NumberWidget/NumberWidget.jsx","components/SudokuTable/SudokuTable.jsx","App.jsx","js/localStorage.js","reportWebVitals.js","index.js"],"names":["module","exports","duplicateMatrix","matrix","newMatrix","Array","i","push","j","createSudokuMatrix","maxNum","numSet","sudokuArray","verticalBoxSize","placeNumber","num","arr","randomSafeIndex","lastRowIndex","length","lastRow","rowsToCheck","safeIndexes","horizontalBoxesUsed","horizontalBox","Math","floor","indexOf","undefined","boxesUsed","boxSafe","index","indexBox","indexInLastRow","rowLen","columnSafe","rowIndex","max","random","findSafeIndex","workingArray","shift","MatrixContext","createContext","MatrixProvider","props","useState","complete","fill","filtered","played","matrixes","setMatrixes","Provider","value","prepMatrixesForStartGame","difficulty","diff","tilesToClear","pow","filterMatrixByDifficulty","prepMatrixesForEndGame","children","NeverPlayed","className","styles","introduction","NeverPlayedDifficulty","PersonalBest","gameRecords","record","storedRecords","copyStoredRecords","possibleRecord","possibleMinutes","timer","minutes","possibleSeconds","seconds","loopMinutes","loopSeconds","displayBestTime","resetCount","hintsUsed","Introduction","easy","normal","hard","ChooseDifficulty","setValue","component","inpGroup","name","id","type","onChange","e","target","checked","htmlFor","Timer","useEffect","interval","setInterval","clearInterval","timeObject","timeToString","LightBulb","opacity","style","viewBox","xmlns","d","Hints","setHintsUsed","useContext","onClick","runLoop","forEach","row","col","revealNumber","copyOfPlayedMatrix","prevState","NumberWidget","setNum","SudokuTable","startGame","isSetNumMode","setIsSetNumMode","clickedCell","setClickedCell","x","y","mousePosition","setMousePosition","table","margin","map","clientX","clientY","clickCell","computed","position","top","left","clickNumberOnWidget","App","useCallback","key","defaultValue","apiUrl","data","storage","JSON","parse","window","localStorage","getItem","url","a","fetch","response","json","console","log","warn","doFetch","getStorage","setGameRecords","setItem","stringify","setStartGame","setDifficulty","setTimer","hints","setHints","setResetCount","isSuccess","alert","storedData","currentGameData","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b977ba40.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"NumberWidget_component__36j4N\",\"num\":\"NumberWidget_num__2BiPk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"introduction\":\"Introduction_introduction__3ssJF\",\"diff\":\"Introduction_diff__r50eO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"ChooseDifficulty_component__3jW4m\",\"inpGroup\":\"ChooseDifficulty_inpGroup__2Ktv8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"SudokuTable_table__eXIGL\",\"computed\":\"SudokuTable_computed__2mOSF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Timer_component__1gU6B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Hints_component__3eUc7\"};","export function duplicateMatrix(matrix) {\n  let newMatrix = new Array(0);\n  for (let i = 0; i < 9; i++) {\n    newMatrix.push(new Array(0));\n    for (let j = 0; j < 9; j++) {\n      newMatrix[i][j] = matrix[i][j];\n    }\n  }\n  return newMatrix;\n}\n\nexport function filterMatrixByDifficulty(matrix, diff) {\n  let tilesToClear = Math.pow(9, 2);\n  switch (diff) {\n    case 'easy':\n      tilesToClear = Math.floor(tilesToClear * 0.25);\n      break;\n    case 'normal':\n      tilesToClear = Math.floor(tilesToClear * 0.5);\n      break;\n    case 'hard':\n      tilesToClear = Math.floor(tilesToClear * 0.75);\n      break;\n    default:\n      break;\n  }\n  while (tilesToClear !== 0) {\n    let i = Math.floor(Math.random() * 9);\n    let j = Math.floor(Math.random() * 9);\n    if (matrix[i][j] !== '') {\n      matrix[i][j] = '';\n      tilesToClear--;\n    }\n  }\n  return matrix;\n}\n\n// - code below isn't the work of Ben Elferink !!!\n// -------------------------------------------------- //\n// -------------------------------------------------- //\n// -------------- algorithm by Rakhan --------------- //\n// -------------------------------------------------- //\n// -------------------------------------------------- //\n\nexport function createSudokuMatrix(maxNum) {\n  //generate number set\n  let numSet = [];\n  let sudokuArray = [];\n\n  //populates number set and files sudoku with the rows and columns it needs\n  for (let i = 1; i <= maxNum; ++i) {\n    numSet.push(i);\n    sudokuArray.push(new Array(maxNum));\n  }\n\n  //size of sub boxes, figure out more dynamic way to set this\n  let horizontalBoxSize = 3,\n    verticalBoxSize = maxNum === 9 ? 3 : 2; //\n\n  //find random number from 0 to max number, expludes max\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * max);\n  }\n\n  //places numbers in the sudoku array\n  function placeNumber(num, arr) {\n    let lastRowIndex = arr.length - 1; //the index of the last row in the working array\n    let lastRow = arr[lastRowIndex]; //the reference to the last row\n    let rowsToCheck = lastRowIndex % verticalBoxSize; //find what row of the sub box we are in vertically\n    let safeIndexes = []; //find which column is save to put a number in to\n    let randomSafeIndex; //pick one of the columns to place the number into from the safeIndexes array\n\n    //used to find a safe column to place the number in the current row\n    function findSafeIndex(boxesUsed) {\n      //looks at previous rows if inside the sub box to see if the current number can be placed in the sub box\n      function boxSafe(index) {\n        let indexBox = Math.floor(index / horizontalBoxSize); //finds which sub box the current index is in\n        if (boxesUsed.indexOf(indexBox) >= 0) {\n          //checks to see if the current index's sub box has already been used\n          return false;\n        } else {\n          return true;\n        }\n      }\n\n      //loop through the current row to find a safe place to put the number\n      for (\n        let indexInLastRow = 0, rowLen = lastRow.length;\n        indexInLastRow < rowLen;\n        indexInLastRow++\n      ) {\n        let columnSafe = true; //assume the current column is safe\n\n        //make sure the current number isn't already used in this column\n        for (let rowIndex = arr.length - 1; rowIndex >= 0; rowIndex--) {\n          if (arr[rowIndex][indexInLastRow] === num) {\n            columnSafe = false;\n          }\n        }\n\n        //make sure current index is empty, column is safe, and that current box is safe\n        if (lastRow[indexInLastRow] === undefined && columnSafe && boxSafe(indexInLastRow)) {\n          safeIndexes.push(indexInLastRow);\n        }\n      }\n\n      //return a safe index to be used for the current number\n      return safeIndexes[getRandomInt(safeIndexes.length)];\n    }\n\n    let horizontalBoxesUsed = []; //records which sub box has been used, in the current sub box row\n\n    //if we are not if the first row of the sub box, loop through the other rows to see which subboxes have been used\n    if (rowsToCheck > 0) {\n      for (let i = rowsToCheck; i > 0; i--) {\n        let horizontalBox = Math.floor(arr[lastRowIndex - i].indexOf(num) / horizontalBoxSize);\n        horizontalBoxesUsed.push(horizontalBox);\n      }\n    }\n\n    //get a safe index to put the number in to the row\n    randomSafeIndex = findSafeIndex(horizontalBoxesUsed);\n\n    //if there are no safe indexs return the number\n    if (randomSafeIndex === undefined) {\n      return num;\n    } else {\n      //else if there are safe indexs add the number to an index in the row and return true\n      lastRow[randomSafeIndex] = num;\n      return true;\n    }\n  }\n\n  //loop through the numbers to set them in the sudoku\n  for (let i = numSet.length - 1; i >= 0; i--) {\n    let workingArray = []; //holds the rows we are currently working with and/or have already wored with\n    let possible = true; //is the sudoku even possible?\n    while (sudokuArray.length > 0) {\n      //while there are rows in the sudokuArray have have been been processed keep looping\n      workingArray.push(sudokuArray.shift()); //add a row to the working array from the sudoku array\n\n      possible = placeNumber(numSet[i], workingArray); //place the current working number in to the working array, to find out if the sudoku puzzle is possible\n\n      if (possible !== true) {\n        //if its not possible generate a new sudoku puzzle\n        // ++iterations;\n        return createSudokuMatrix(maxNum);\n      }\n    }\n\n    //make the sudoku array equal to the working array when we're done\n    sudokuArray = workingArray;\n  }\n\n  return sudokuArray; //return our array to start to do some sudoku\n}\n","import { createContext, useState } from 'react';\nimport { createSudokuMatrix, duplicateMatrix, filterMatrixByDifficulty } from './matrixFunctions';\n\nexport const MatrixContext = createContext();\n\nexport const MatrixProvider = (props) => {\n  const [matrixes, setMatrixes] = useState({\n    complete: new Array(9).fill(new Array(9).fill('')), // original matrix, has all data\n    filtered: new Array(9).fill(new Array(9).fill('')), // filtered by difficulty, kept for reset purpose\n    played: new Array(9).fill(new Array(9).fill('')), // displayed matrix, manipulated by user\n  });\n\n  const prepMatrixesForStartGame = (difficulty) => {\n    // create and set all 3 required matrixes\n    let complete = createSudokuMatrix(9);\n    let filtered = filterMatrixByDifficulty(duplicateMatrix(complete), difficulty);\n    setMatrixes({ complete, filtered, played: filtered });\n  };\n\n  const prepMatrixesForEndGame = () => {\n    // empty all matrixes\n    setMatrixes({\n      complete: new Array(9).fill(new Array(9).fill('')),\n      filtered: new Array(9).fill(new Array(9).fill('')),\n      played: new Array(9).fill(new Array(9).fill('')),\n    });\n  };\n\n  return (\n    <MatrixContext.Provider\n      value={{ matrixes, setMatrixes, prepMatrixesForStartGame, prepMatrixesForEndGame }}>\n      {props.children}\n    </MatrixContext.Provider>\n  );\n};\n","import styles from './style/Introduction.module.css';\n\nfunction NeverPlayed() {\n  return (\n    <div className={styles.introduction}>\n      <p>\n        It seems you have never played before... Here's a simple guide to help you choose a\n        difficulty for the first time:\n      </p>\n\n      <br />\n      <br />\n\n      <table>\n        <thead>\n          <tr>\n            <th />\n            <th>hints</th>\n            <th>complete</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td className={styles.diff}>Easy:</td>\n            <td>3</td>\n            <td>75%</td>\n          </tr>\n\n          <tr>\n            <td className={styles.diff}>Normal:</td>\n            <td>2</td>\n            <td>50%</td>\n          </tr>\n\n          <tr>\n            <td className={styles.diff}>Hard:</td>\n            <td>1</td>\n            <td>25%</td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport default NeverPlayed;\n","import styles from './style/Introduction.module.css';\n\nfunction NeverPlayedDifficulty({ difficulty }) {\n  return (\n    <div className={styles.introduction}>\n      <p>\n        You haven't played '{difficulty}' mode yet,\n        <br />\n        what are you waiting for? Let's play!\n        <br />\n        <br />\n        Playing in {difficulty} gives you{' '}\n        {difficulty === 'easy' ? 3 : difficulty === 'normal' ? 2 : 1} hints,\n        <br />\n        and the board is {difficulty === 'easy' ? 75 : difficulty === 'normal' ? 50 : 25}% complete\n      </p>\n    </div>\n  );\n}\n\nexport default NeverPlayedDifficulty;\n","import styles from './style/Introduction.module.css';\n\nfunction PersonalBest({ gameRecords, difficulty }) {\n  const displayBestTime = (storedRecords) => {\n    let copyStoredRecords = [...storedRecords],\n      possibleRecord = copyStoredRecords[0]; // variable with the updated 'best record' after each loop\n\n    // compare fastest time for the selected difficulty by:  reference 1  ,  reference 2\n    for (let i = 0; i < copyStoredRecords.length; i++) {\n      let possibleMinutes = possibleRecord.timer.minutes, // updated best minutes\n        possibleSeconds = possibleRecord.timer.seconds, // updated best seconds\n        loopMinutes = copyStoredRecords[i].timer.minutes, // current loop minutes\n        loopSeconds = copyStoredRecords[i].timer.seconds; // current loop seconds\n\n      if (loopMinutes < possibleMinutes) {\n        // reference 1 - fastest alltime, meaning minutes are beat!\n        possibleRecord = copyStoredRecords[i];\n      } else if (loopSeconds < possibleSeconds && loopMinutes === possibleMinutes) {\n        // reference 2 - fastest by seconds only, but the minutes are equal\n        possibleRecord = copyStoredRecords[i];\n      }\n    }\n\n    return possibleRecord;\n  };\n\n  const record = displayBestTime(gameRecords[`${difficulty}`]);\n\n  return (\n    <div className={styles.introduction}>\n      <h4>Your record playing '{difficulty}' is:</h4>\n\n      <p>\n        {record.timer.minutes} minutes, and {record.timer.seconds} seconds!\n        <br />\n        {record.resetCount === 0 && record.hintsUsed === 0\n          ? 'You perfected your time without reseting and without using hints!'\n          : record.resetCount === 0 && record.hintsUsed !== 0\n          ? `You used ${record.hintsUsed} hints, without reseting.`\n          : record.resetCount !== 0 && record.hintsUsed === 0\n          ? `You used ${record.resetCount} resets, without any hints.`\n          : `You used ${record.hintsUsed} hints, and reset ${record.resetCount} times.`}\n      </p>\n    </div>\n  );\n}\n\nexport default PersonalBest;\n","import React from 'react';\nimport NeverPlayed from './NeverPlayed';\nimport NeverPlayedDifficulty from './NeverPlayedDifficulty';\nimport PersonalBest from './PersonalBest';\n\nfunction Introduction({ gameRecords, difficulty }) {\n  if (\n    gameRecords.easy.length === 0 &&\n    gameRecords.normal.length === 0 &&\n    gameRecords.hard.length === 0\n  ) {\n    // if no previous records exist, display the relevent UI\n    return <NeverPlayed />;\n  } else if (gameRecords[`${difficulty}`].length === 0) {\n    // if previous records exist, but not for the current displayed difficulty, then display the relevant UI\n    return <NeverPlayedDifficulty difficulty={difficulty} />;\n  } else {\n    // a record for the current difficulty exists,\n    // analyze the array of objects, locate the fastest time, and display it in the UI\n    return <PersonalBest gameRecords={gameRecords} difficulty={difficulty} />;\n  }\n}\n\nexport default Introduction;\n","import styles from './style/ChooseDifficulty.module.css';\n\nfunction ChooseDifficulty({ value, setValue }) {\n  return (\n    <div className={styles.component}>\n      <div className={styles.inpGroup}>\n        <input\n          name='diff'\n          id='diff_easy'\n          type='radio'\n          value='easy'\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          checked={value === 'easy'}\n        />\n        <label htmlFor='diff_easy'>Easy</label>\n      </div>\n\n      <div className={styles.inpGroup}>\n        <input\n          name='diff'\n          id='diff_normal'\n          type='radio'\n          value='normal'\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          checked={value === 'normal'}\n        />\n        <label htmlFor='diff_normal'>Normal</label>\n      </div>\n\n      <div className={styles.inpGroup}>\n        <input\n          name='diff'\n          id='diff_hard'\n          type='radio'\n          value='hard'\n          onChange={(e) => {\n            setValue(e.target.value);\n          }}\n          checked={value === 'hard'}\n        />\n        <label htmlFor='diff_hard'>Hard</label>\n      </div>\n    </div>\n  );\n}\n\nexport default ChooseDifficulty;\n","import { useEffect } from 'react';\nimport styles from './style/Timer.module.css';\n\nfunction Timer({ value, setValue }) {\n  // this useEffect handles an interval, which adds +1 to the timer every second,\n  // the interval also increments the minutes (when the timer is at 59 seconds)\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (value.seconds < 59) {\n        setValue({ minutes: value.minutes, seconds: value.seconds + 1 });\n      } else {\n        setValue({ minutes: value.minutes + 1, seconds: 0 });\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(interval);\n    };\n  });\n\n  // this function converts the time object to a string\n  // from { minutes: 0, seconds: 42 }\n  // to '00:42'\n  const timeToString = (timeObject) => {\n    let minutes = timeObject.minutes;\n    let seconds = timeObject.seconds;\n    minutes < 10 ? (minutes = `0${minutes}`) : (minutes = `${minutes}`);\n    seconds < 10 ? (seconds = `0${seconds}`) : (seconds = `${seconds}`);\n    return `${minutes}:${seconds}`;\n  };\n\n  return <div className={styles.component}>Time elapsed: {timeToString(value)}</div>;\n}\n\nexport default Timer;\n","import React from 'react';\n\nfunction LightBulb({ opacity }) {\n  return (\n    <svg style={{ opacity: opacity }} viewBox='0 0 48 48' xmlns='http://www.w3.org/2000/svg'>\n      <g>\n        <path d='M18 42c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2v-2H18v2zm6-38c-7.73 0-14 6.27-14 14 0 4.76 2.38 8.95 6 11.48V34c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2v-4.52c3.62-2.53 6-6.72 6-11.48 0-7.73-6.27-14-14-14zm5.71 22.2L28 27.39V32h-8v-4.6l-1.71-1.19C15.6 24.33 14 21.27 14 18.01c0-5.51 4.49-10 10-10s10 4.49 10 10c0 3.25-1.6 6.31-4.29 8.19z' />\n      </g>\n    </svg>\n  );\n}\n\nexport default LightBulb;\n","import { useContext } from 'react';\nimport { MatrixContext } from '../../js/matrixContextAPI';\nimport { duplicateMatrix } from '../../js/matrixFunctions';\nimport styles from './style/Hints.module.css';\nimport Icon from '../../icons/LightBulb';\n\nfunction Hints({ value, setValue, setHintsUsed }) {\n  const { matrixes, setMatrixes } = useContext(MatrixContext);\n\n  const clickHint = () => {\n    if (value > 0) {\n      // allow the 'while' loop only if game-board is NOT complete\n      let runLoop = false;\n      matrixes.played.forEach((row) => {\n        row.forEach((col) => {\n          if (col === '') {\n            runLoop = true;\n          }\n        });\n      });\n\n      // target random cell from displayed matrix, and if it's empty reveal it's number according to raw matrix.\n      while (runLoop) {\n        let i = Math.floor(Math.random() * 9);\n        let j = Math.floor(Math.random() * 9);\n        if (matrixes.played[i][j] === '') {\n          let revealNumber = matrixes.complete[i][j];\n          let copyOfPlayedMatrix = duplicateMatrix(matrixes.played);\n          copyOfPlayedMatrix[i][j] = revealNumber;\n          setMatrixes({ ...matrixes, played: copyOfPlayedMatrix });\n\n          // update hint counters\n          setValue((prevState) => prevState - 1);\n          setHintsUsed((prevState) => prevState + 1);\n          break;\n        }\n      }\n    }\n  };\n\n  return (\n    <div className={styles.component}>\n      <button onClick={clickHint}>Hint</button>\n      {value >= 1 ? <Icon opacity='100%' /> : <Icon opacity='25%' />}\n      {value >= 2 ? <Icon opacity='100%' /> : <Icon opacity='25%' />}\n      {value >= 3 ? <Icon opacity='100%' /> : <Icon opacity='25%' />}\n    </div>\n  );\n}\n\nexport default Hints;\n","import styles from './style/NumberWidget.module.css';\n\nfunction NumberWidget({ setNum, style }) {\n  return (\n    <div className={styles.component} style={style}>\n      <div\n        className={styles.num}\n        onClick={() => {\n          setNum(1);\n        }}>\n        1\n      </div>\n      <div\n        className={styles.num}\n        onClick={() => {\n          setNum(2);\n        }}>\n        2\n      </div>\n      <div\n        className={styles.num}\n        onClick={() => {\n          setNum(3);\n        }}>\n        3\n      </div>\n      <div\n        className={styles.num}\n        onClick={() => {\n          setNum(4);\n        }}>\n        4\n      </div>\n      <div\n        className={styles.num}\n        onClick={() => {\n          setNum(5);\n        }}>\n        5\n      </div>\n      <div\n        className={styles.num}\n        onClick={() => {\n          setNum(6);\n        }}>\n        6\n      </div>\n      <div\n        className={styles.num}\n        onClick={() => {\n          setNum(7);\n        }}>\n        7\n      </div>\n      <div\n        className={styles.num}\n        onClick={() => {\n          setNum(8);\n        }}>\n        8\n      </div>\n      <div\n        className={styles.num}\n        onClick={() => {\n          setNum(9);\n        }}>\n        9\n      </div>\n    </div>\n  );\n}\n\nexport default NumberWidget;\n","import { useState, useContext } from 'react';\nimport { MatrixContext } from '../../js/matrixContextAPI';\nimport { duplicateMatrix } from '../../js/matrixFunctions';\nimport styles from './style/SudokuTable.module.css';\nimport NumberWidget from '../NumberWidget/NumberWidget';\n\nfunction SudokuTable({ startGame }) {\n  const { matrixes, setMatrixes } = useContext(MatrixContext);\n  const [isSetNumMode, setIsSetNumMode] = useState(false); // reveals NumberWidget\n  const [clickedCell, setClickedCell] = useState({ i: null, j: null }); // cell cordinates for NumberWidget value\n  const [mousePosition, setMousePosition] = useState({ x: null, y: null }); // click cordinates for NumberWidget position\n\n  // ----------\n  // ---------------\n  // Functions for: game interactions\n  // ---------------\n  // ----------\n\n  // this sets the matrix indexes for the clicked cell,\n  // and the clicked screen cordinates for the widget to appear at\n  const clickCell = (e, i, j) => {\n    setClickedCell({ i: i, j: j });\n    setMousePosition({ x: e.clientX, y: e.clientY });\n    setIsSetNumMode(true);\n  };\n\n  // this sets the clicked number from the widget into the matrix,\n  // using the cell indexes\n  const clickNumberOnWidget = (num) => {\n    let copyOfPlayedMatrix = duplicateMatrix(matrixes.played);\n    copyOfPlayedMatrix[clickedCell.i][clickedCell.j] = num;\n    setMatrixes({ ...matrixes, played: copyOfPlayedMatrix });\n    setIsSetNumMode(false);\n  };\n\n  return (\n    <>\n      <table className={styles.table} style={{ margin: startGame ? '1em 0' : '0' }}>\n        <tbody>\n          {matrixes.played.map((row, i) => (\n            <tr key={i}>\n              {row.map((num, j) =>\n                matrixes.filtered[i][j] === '' ? (\n                  <td\n                    key={`${i}-${j}`}\n                    onClick={(e) => {\n                      clickCell(e, i, j);\n                    }}>\n                    {num}\n                  </td>\n                ) : (\n                  <td key={`${i}-${j}`} className={styles.computed}>\n                    {num}\n                  </td>\n                ),\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      {isSetNumMode && (\n        <NumberWidget\n          style={{ position: 'fixed', top: mousePosition.y, left: mousePosition.x }}\n          setNum={(num) => {\n            clickNumberOnWidget(num);\n          }}\n        />\n      )}\n    </>\n  );\n}\n\nexport default SudokuTable;\n","import { useState, useEffect, useCallback, useContext } from 'react';\nimport { getStorage, setStorage } from './js/localStorage';\nimport { MatrixContext } from './js/matrixContextAPI';\nimport { duplicateMatrix } from './js/matrixFunctions';\nimport './style/style.css';\nimport Introduction from './components/Introduction/Introduction';\nimport ChooseDifficulty from './components/ChooseDifficulty/ChooseDifficulty';\nimport Timer from './components/Timer/Timer';\nimport Hints from './components/Hints/Hints';\nimport SudokuTable from './components/SudokuTable/SudokuTable';\n\nfunction App() {\n  // gameRecords holds an object with 3 keys: 'easy', 'normal', 'hard',\n  // each lkey has an array of game data, which can be used to show personal best or even create a leaderboard.\n  const [gameRecords, setGameRecords] = useState(\n    useCallback(() => getStorage('Sudoku_by_Ben_Elferink', { easy: [], normal: [], hard: [] }), []),\n  );\n  // all of the game records are pulled & saved into local storage!\n  useEffect(() => setStorage('Sudoku_by_Ben_Elferink', gameRecords), [gameRecords]);\n\n  // the sudoku matrixes (3 of them) are held and handled in Context API\n  const { matrixes, setMatrixes, prepMatrixesForStartGame, prepMatrixesForEndGame } = useContext(\n    MatrixContext,\n  );\n\n  // these are the game states\n  const [startGame, setStartGame] = useState(false);\n  const [difficulty, setDifficulty] = useState('normal');\n  const [timer, setTimer] = useState({ minutes: 0, seconds: 0 });\n  const [hints, setHints] = useState(0);\n  const [hintsUsed, setHintsUsed] = useState(0);\n  const [resetCount, setResetCount] = useState(0);\n\n  // ----------\n  // ---------------\n  // Functions for: control buttons\n  // ---------------\n  // ----------\n\n  const clickStartGame = () => {\n    // create and set all 3 required matrixes,\n    prepMatrixesForStartGame(difficulty);\n    // set timer & hints\n    setTimer({ minutes: 0, seconds: 0 });\n    switch (difficulty) {\n      case 'easy':\n        setHints(3);\n        break;\n      case 'normal':\n        setHints(2);\n        break;\n      case 'hard':\n        setHints(1);\n        break;\n      default:\n        break;\n    }\n    // and toggle the UI\n    setStartGame(true);\n  };\n\n  const clickGiveUp = () => {\n    // reset all states (because component does not unmount, it's children swap)\n    prepMatrixesForEndGame();\n    setTimer({ minutes: 0, seconds: 0 });\n    setHints(0);\n    setHintsUsed(0);\n    setResetCount(0);\n    // and toggle the UI\n    setStartGame(false);\n  };\n\n  const clickReset = () => {\n    // reset the played matrix with the filtered matrix\n    setMatrixes({ ...matrixes, played: matrixes.filtered });\n    // reset timer & hints\n    setTimer({ minutes: 0, seconds: 0 });\n    switch (difficulty) {\n      case 'easy':\n        setHints(3);\n        break;\n      case 'normal':\n        setHints(2);\n        break;\n      case 'hard':\n        setHints(1);\n        break;\n      default:\n        break;\n    }\n    setHintsUsed(0);\n    // add +1 to the reset count\n    setResetCount((prevState) => prevState + 1);\n  };\n\n  const clickSolve = () => {\n    let isSuccess = true,\n      copyOfPlayedMatrix = duplicateMatrix(matrixes.played);\n\n    // target each cell of the played matrix, and compare with the same cell on the complete matrix,\n    // return false only if an error has been recognized\n    matrixes.played.forEach((row, i) => {\n      row.forEach((col, j) => {\n        if (col !== matrixes.complete[i][j]) {\n          // this clears the errors\n          copyOfPlayedMatrix[i][j] = '';\n          isSuccess = false;\n        }\n      });\n    });\n\n    if (isSuccess) {\n      window.alert('Congratulations! You finished the puzzle!');\n      // if puzzle was correct (no mistakes)\n      // store the game data\n      let storedData = { ...gameRecords };\n      let currentGameData = { difficulty, timer, hintsUsed, resetCount };\n      storedData[`${difficulty}`].push(currentGameData);\n      setGameRecords(storedData);\n      // then reset all states (because component does not unmount, it's children swap)\n      prepMatrixesForEndGame();\n      setTimer({ minutes: 0, seconds: 0 });\n      setHints(0);\n      setHintsUsed(0);\n      setResetCount(0);\n      // and toggle the UI\n      setStartGame(false);\n    } else {\n      window.alert('Puzzle is incorrect, clearing error(s), try again...');\n      setMatrixes({ ...matrixes, played: copyOfPlayedMatrix });\n    }\n  };\n\n  if (!startGame) {\n    return (\n      <div className='app'>\n        <div className='startGroup'>\n          <Introduction gameRecords={gameRecords} difficulty={difficulty} />\n          <ChooseDifficulty value={difficulty} setValue={setDifficulty} />\n          <button onClick={clickStartGame}>Start Game</button>\n        </div>\n        <SudokuTable startGame={startGame} />\n      </div>\n    );\n  } else {\n    return (\n      <div className='app'>\n        <Timer value={timer} setValue={setTimer} />\n        <Hints value={hints} setValue={setHints} setHintsUsed={setHintsUsed} />\n        <SudokuTable startGame={startGame} />\n        <div className='controls'>\n          <button onClick={clickGiveUp}>Give Up</button>\n          <button onClick={clickReset}>Reset</button>\n          <button onClick={clickSolve}>Solve</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// * * * * *\n// Developer: Ben Elferink\n// https://github.com/belferink1996\n// * * * * *\n// How to use these functions:\n// 1) import { getStorage, setStorage } from './localStorage.js';\n//\n// To generate data on mount:\n// 2) let anyVariableOrState = getStorage( 'key', value )  <-- 'key' is a string, used for load & save to localStorage,\n//                                      - OR -                  value is anything you want it to be, it's used if storage item doesn't exist (first time setup)\n//    let anyVariableOrState = getStorage( 'key' , 'API', 'https://api.github.com' )  <-- pass 'API' as default value, and the API link is the 3rd paramater,\n//                                                                                       it'll fetch the API only if storage doesn't exist (great for APIs with limited calls, and require caching)\n// To save data when it changes do:\n// 3) React.useEffect(() => {\n//      setStorage( 'key', anyVariableOrState )\n//    }, [anyVariableOrState])\n\nexport function getStorage(key, defaultValue, apiUrl) {\n  let storage = JSON.parse(window.localStorage.getItem(key)), // get storage item\n    data; // undefined\n\n  if (storage == null) {\n    // if storage item is empty\n\n    if (defaultValue === 'API') {\n      // if 2nd parameter is 'API'\n      const doFetch = async (url) => {\n        // JavaScript function responsible for fetching and handling the data from the API\n        try {\n          const response = await fetch(url);\n          const data = await response.json();\n          console.log(`✅ -FETCHED- : ${url}`, data);\n          return data;\n        } catch (error) {\n          // fetching error\n          console.warn(`❌ -FAILED- : ${url}`, error);\n          return null;\n        }\n      };\n\n      data = doFetch(apiUrl); // data is fetch from API link (or 'null' if fetch failed)\n    } else {\n      data = defaultValue; // data is generated by given default value\n      console.log('💡 -GENERATED-', data);\n    }\n  } else {\n    // storage has data\n\n    data = storage; // data to return is taken from storage\n\n    console.log(`⤴️ -LOADED- localStorage: ${key}`, data);\n  }\n\n  if (typeof data === 'function') {\n    // defaultValue can be a return function\n    return data(); // call function -> return it's variable\n  } else {\n    return data; // return either sotrage data or generated data\n  }\n}\n\nexport function setStorage(key, data) {\n  window.localStorage.setItem(key, JSON.stringify(data)); // save storage item\n  console.log(`⤵️ -SAVED- localStorage: ${key}`, data);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { MatrixProvider } from './js/matrixContextAPI';\nimport App from './App.jsx';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <MatrixProvider>\n      <App />\n    </MatrixProvider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}